[{"source": "PMC", "date": "20201222", "key": "pmc.key", "infons": {}, "documents": [{"id": "6107989", "infons": {"license": "CC BY"}, "passages": [{"offset": 0, "infons": {"article-id_doi": "10.12688/f1000research.14541.1", "article-id_pmc": "6107989", "article-id_pmid": "30210791", "elocation-id": "1105", "fn": "[version 1; referees: 2 approved]", "kwd": "protein schematic BIOCONDUCTOR R package visualization.", "license": "This is an open access article distributed under the terms of the Creative Commons Attribution Licence, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.", "name_0": "surname:Brennan;given-names:Paul", "section_type": "TITLE", "type": "front", "volume": "7", "year": "2018"}, "text": "drawProteins: a Bioconductor/R package for reproducible and programmatic generation of protein schematics", "sentences": [], "annotations": [], "relations": []}, {"offset": 106, "infons": {"section_type": "ABSTRACT", "type": "abstract"}, "text": "Protein schematics are valuable for research, teaching and knowledge communication. However, the tools used to automate the process are challenging. The purpose of the drawProteins package is to enable the generation of schematics of proteins in an automated fashion that can integrate with the Bioconductor/R suite of tools for bioinformatics and statistical analysis. Using UniProt accession numbers, the package uses the UniProt API to get the features of the protein from the UniProt database. The features are assembled into a data frame and visualized using adaptations of the ggplot2 package. Visualizations can be customised in many ways including adding additional protein features information from other data frames, altering colors and protein names and adding extra layers using other ggplot2 functions. This can be completed within a script that makes the workflow reproducible and sharable.", "sentences": [], "annotations": [], "relations": []}, {"offset": 1011, "infons": {"section_type": "INTRO", "type": "title_1"}, "text": "Introduction", "sentences": [], "annotations": [], "relations": []}, {"offset": 1024, "infons": {"section_type": "INTRO", "type": "paragraph"}, "text": "Protein schematics are abundant in research papers, reviews, text books and on the internet . Thus, they represent one of the most common molecular visualizations shown and seen by researchers and students. Constructing protein schematics is often time consuming and is not performed in a reproducible and easily shared manner. The schematics frequently reflect domain expertise, but often also reflect the opinions of an individual researcher in a manner that is not obvious.", "sentences": [], "annotations": [], "relations": []}, {"offset": 1501, "infons": {"section_type": "INTRO", "type": "paragraph"}, "text": "There are solutions in other languages: a Java and JavaScript tool ,  that can be used for protein visualization. For visualization on the internet, there is also the BioJS solution, which can be used for proteins . Both of these tools are useful but not easily integrated into the Bioconductor workflow. The GenVisR package contains the option to produce highly customisable publication-quality graphics for genomic data . The focus on genomic data reduces the usefulness of drawing protein schematics, particularly those illustrating multiple proteins and protein families.", "sentences": [], "annotations": [], "relations": []}, {"offset": 2077, "infons": {"section_type": "INTRO", "type": "paragraph"}, "text": "For these reasons, a protein visualization package was produced using R to allow compatibility with the Bio- conductor suite of bioinformatics packages. It uses the UniProt Proteins API ,  as a resource of protein features and the ggplot2 package  as a basis for drawing the schematics. Multiple proteins can be drawn from similar or different families. The only limitation is the availability of UniProt entries.", "sentences": [], "annotations": [], "relations": []}, {"offset": 2491, "infons": {"section_type": "INTRO", "type": "paragraph"}, "text": "Schematic customisation is possible. Protein chains, domains, regions, motifs or phosphorylation sites can be drawn separately or together. Colors can be altered and protein names (labels) can be changed. All of this can be done in a scripted manner that facilitates code sharing, visualization reproducibility and good practice in scientific computing .", "sentences": [], "annotations": [], "relations": []}, {"offset": 2846, "infons": {"section_type": "METHODS", "type": "title_1"}, "text": "Methods", "sentences": [], "annotations": [], "relations": []}, {"offset": 2854, "infons": {"section_type": "METHODS", "type": "title_2"}, "text": "System requirements", "sentences": [], "annotations": [], "relations": []}, {"offset": 2874, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "The Bioconductor pacakge, drawProteins, is designed to work with Bioconductor 3.7 and R version 3.5.", "sentences": [], "annotations": [], "relations": []}, {"offset": 2975, "infons": {"section_type": "METHODS", "type": "title_2"}, "text": "Implementation", "sentences": [], "annotations": [], "relations": []}, {"offset": 2990, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "This package has been created to allow the creation of protein schematics based on the data obtained from the Uniprot Protein Database.", "sentences": [], "annotations": [], "relations": []}, {"offset": 3126, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "The basic workflow of drawProteins is:", "sentences": [], "annotations": [], "relations": []}, {"offset": 3165, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "To provide one or more Uniprot IDs", "sentences": [], "annotations": [], "relations": []}, {"offset": 3200, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "Get a list of feature from the Uniprot API", "sentences": [], "annotations": [], "relations": []}, {"offset": 3243, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "Draw the chains of the proteins", "sentences": [], "annotations": [], "relations": []}, {"offset": 3275, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "Add features as desired", "sentences": [], "annotations": [], "relations": []}, {"offset": 3299, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "drawProteins uses the package httr to interact with the Uniprot API and extract a JSON object into R. The JSON object is used to create a data frame. Adaptations of the graphing package ggplot2 are then used to create the protein schematic.", "sentences": [], "annotations": [], "relations": []}, {"offset": 3540, "infons": {"section_type": "METHODS", "type": "title_2"}, "text": "Operation", "sentences": [], "annotations": [], "relations": []}, {"offset": 3550, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": " Getting the data from Uniprot. Currently, drawProteins obtains the protein feature information from the UniProt Protein API , . At least one working Uniprot accession number must be provided. More than one can be provided but they must be in the same vector, separated by a space. The space is replaced to create a url that can be used to query the Uniprot API .", "sentences": [], "annotations": [], "relations": []}, {"offset": 3914, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "The get_features() function uses the Uniprot API to return the features of a protein - the chain, domain information and other annotated features such as \u201crepeats\u201d and \u201cmotifs\u201d. Post-translational modifications, such as phosphorylations, are also provided by the UniProt API.", "sentences": [], "annotations": [], "relations": []}, {"offset": 4198, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "The httr::content() function is then used to extract the content. From the get_features() function, this will provide lists of lists. The length of the parent lists corresponds to the number of accession numbers provided. Interestingly, the order is different to that of the UniProt accession numbers provided. The lists inside the parent list are a list of six, one for each protein, that contains names of the proteins and the features.", "sentences": [], "annotations": [], "relations": []}, {"offset": 4637, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "As an example, the script below will retrieve, from UniProt, the details of a the human version of a protein called RelA or NF-kappaB, p65, a well-studied transcription factor .", "sentences": [], "annotations": [], "relations": []}, {"offset": 4815, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "With internet access, this can be retrieved from Uniprot with this code:", "sentences": [], "annotations": [], "relations": []}, {"offset": 4888, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": " Turning Uniprot data into a dataframe. The next step in the workflow is to convert the data from the Uniprot API into a dataframe that can be used with ggplot2.", "sentences": [], "annotations": [], "relations": []}, {"offset": 5050, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "The feature_to_dataframe() function will convert the list of lists of six provided by the get_features() function to a dataframe, which can then be used to plot the schematics.", "sentences": [], "annotations": [], "relations": []}, {"offset": 5227, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "The feature_to_dataframe() function will also add an \u201corder\u201d value to allow plotting. The order goes from the bottom in the manner of a graph.", "sentences": [], "annotations": [], "relations": []}, {"offset": 5374, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "The rel_data object is a data frame with 9 variables and observations that include protein features. The variables are show below. A data frame of this type could be created independently of UniProt.", "sentences": [], "annotations": [], "relations": []}, {"offset": 5574, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": " Draw the canvas, protein chains and domains. The first step is to create the plot area with the draw_canvas() function. The x-axis of the canvas is based on the length of the protein (or the longest protein in the case of drawing multiple proteins). The y-axis is based on the number of proteins being drawn. The draw_canvas() function requires a data frame.", "sentences": [], "annotations": [], "relations": []}, {"offset": 5934, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "Usually, the next step is to draw the protein chains using the draw_chains() function. This requires a ggplot2 object and a data frame in that order. The data frame does not have to be the same as that used for draw_canvas() but must contain the variables type, description, begin, end, entryName, order.", "sentences": [], "annotations": [], "relations": []}, {"offset": 6239, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "Protein domains can be added with the draw_domains() function, which also requires a ggplot2 object and a data frame in that order. Again, the data frame does not have to be the same as that obtained from UniProt but must contain the variables type, description, begin, end, and order. Thus custom domains can be added with the draw_domains() function. Note that the chain and the domain are drawn to scale in terms of their number of amino acids ( Figure 1).", "sentences": [], "annotations": [], "relations": []}, {"offset": 6699, "infons": {"file": "f1000research-7-15828-g0000.jpg", "id": "f1", "section_type": "FIG", "type": "fig_title_caption"}, "text": "Protein domain schematic of RelA/p65.", "sentences": [], "annotations": [], "relations": []}, {"offset": 6737, "infons": {"file": "f1000research-7-15828-g0000.jpg", "id": "f1", "section_type": "FIG", "type": "fig_caption"}, "text": "The default output gives a grey background and labels the domain. RHD = Rel Homology Domain.", "sentences": [], "annotations": [], "relations": []}, {"offset": 6830, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "To show this visualization better, a white background helps, as does removing the y-axis and the grid ( Figure 2). Changing the size of the text using the base_size argument also aids visualization. This can be done with this code:", "sentences": [], "annotations": [], "relations": []}, {"offset": 7062, "infons": {"file": "f1000research-7-15828-g0001.jpg", "id": "f2", "section_type": "FIG", "type": "fig_title_caption"}, "text": "Protein domain schematic of RelA/p65.", "sentences": [], "annotations": [], "relations": []}, {"offset": 7100, "infons": {"file": "f1000research-7-15828-g0001.jpg", "id": "f2", "section_type": "FIG", "type": "fig_caption"}, "text": "The background can be customized using theme functions from ggplot2. RHD = Rel Homology Domain.", "sentences": [], "annotations": [], "relations": []}, {"offset": 7196, "infons": {"section_type": "METHODS", "type": "title_1"}, "text": "Use cases", "sentences": [], "annotations": [], "relations": []}, {"offset": 7206, "infons": {"section_type": "METHODS", "type": "title_2"}, "text": "Putting the RelA workflow together and adding titles", "sentences": [], "annotations": [], "relations": []}, {"offset": 7259, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "The UniProt API provides information on protein regions, protein motifs and protein phosphorylation sites. By using the functions shown in the script below, it is possible to show the features of the protein desired to create. Altering colors and adding customisation is possible.", "sentences": [], "annotations": [], "relations": []}, {"offset": 7540, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "For the human protein RelA, also known as the p65 subunit of NFkappaB, a transcription factor with diverse functions including a role in leukaemia, inflammation and cancer, here is a good workflow that generates a nice schematic of the protein showing domains and phosphorylation sites ( Figure 3).", "sentences": [], "annotations": [], "relations": []}, {"offset": 7839, "infons": {"file": "f1000research-7-15828-g0002.jpg", "id": "f3", "section_type": "FIG", "type": "fig_title_caption"}, "text": "More detailed protein domain schematic of RelA/p65.", "sentences": [], "annotations": [], "relations": []}, {"offset": 7891, "infons": {"file": "f1000research-7-15828-g0002.jpg", "id": "f3", "section_type": "FIG", "type": "fig_caption"}, "text": "By drawing the domains, regions and motifs a more detailed protein schematic is generated. RHD = Rel Homology Domain; TAD = Transactivation Domain. Yellow circles denote phosphorylation sites.", "sentences": [], "annotations": [], "relations": []}, {"offset": 8084, "infons": {"section_type": "METHODS", "type": "title_2"}, "text": "Drawing schematic for multiple proteins", "sentences": [], "annotations": [], "relations": []}, {"offset": 8124, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "With internet access, the script below shows the workflow and generates a visualization of the five human proteins of the NF-kappaB transcription factor family ( Figure 4).", "sentences": [], "annotations": [], "relations": []}, {"offset": 8297, "infons": {"file": "f1000research-7-15828-g0003.jpg", "id": "f4", "section_type": "FIG", "type": "fig_title_caption"}, "text": "Protein domain schematic of human NF-kappaB proteins.", "sentences": [], "annotations": [], "relations": []}, {"offset": 8351, "infons": {"file": "f1000research-7-15828-g0003.jpg", "id": "f4", "section_type": "FIG", "type": "fig_caption"}, "text": "The five members of the NF-kappaB transcription factors family can be illustrated by drawing the domains, regions and motifs as detailed on the UniProt database. The lengths of the chains, domains and motifs are proportional to the number of amino acids. RHD = Rel Homology Domain; TAD = Transactivation Domain. Yellow circles denote phosphorylation sites.", "sentences": [], "annotations": [], "relations": []}, {"offset": 8708, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "The proteins, domains and phosphorylation sites (yellow circles) are drawn and positioned according to amino acid number.", "sentences": [], "annotations": [], "relations": []}, {"offset": 8830, "infons": {"section_type": "METHODS", "type": "title_2"}, "text": "Working with BioMart", "sentences": [], "annotations": [], "relations": []}, {"offset": 8851, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "It is possible to use bioMart ,  to pull out the UniProt accession numbers for a Gene Ontology (GO) term. For example, the GO term for \u201cMAP kinase activity\u201d. This has a GO number of GO:0004707. This example script borrows heavily on the biomaRt users guide written by Steffen Durinck, Wolfgang Huber and Mike Smith . The script below generates a visualization containing 14 protein schematics ( Figure 5).", "sentences": [], "annotations": [], "relations": []}, {"offset": 9261, "infons": {"file": "f1000research-7-15828-g0004.jpg", "id": "f5", "section_type": "FIG", "type": "fig_title_caption"}, "text": "Protein domain schematic of human MAP kinases.", "sentences": [], "annotations": [], "relations": []}, {"offset": 9308, "infons": {"file": "f1000research-7-15828-g0004.jpg", "id": "f5", "section_type": "FIG", "type": "fig_caption"}, "text": "Using bioMart with the Gene Ontology term for \"MAP kinase activity\", it is possible to draw multiple human MAP kinases using data from UniProt. Yellow circles denote phosphorylation sites.", "sentences": [], "annotations": [], "relations": []}, {"offset": 9497, "infons": {"section_type": "METHODS", "type": "title_2"}, "text": "Customizing the draw functions", "sentences": [], "annotations": [], "relations": []}, {"offset": 9528, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "Various customizations are possible:", "sentences": [], "annotations": [], "relations": []}, {"offset": 9565, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "Alter chain color and outline.", "sentences": [], "annotations": [], "relations": []}, {"offset": 9596, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "Change the labels to a custom list (but remember that the plots are drawn from the bottom up)", "sentences": [], "annotations": [], "relations": []}, {"offset": 9690, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "Change the size and color of the phosphorylation symbols.", "sentences": [], "annotations": [], "relations": []}, {"offset": 9748, "infons": {"section_type": "METHODS", "type": "paragraph"}, "text": "These are illustrated with the script below which generates Figure 6.", "sentences": [], "annotations": [], "relations": []}, {"offset": 9818, "infons": {"file": "f1000research-7-15828-g0005.jpg", "id": "f6", "section_type": "FIG", "type": "fig_title_caption"}, "text": "Customizing the protein schematic of the NF-kappaB family.", "sentences": [], "annotations": [], "relations": []}, {"offset": 9877, "infons": {"file": "f1000research-7-15828-g0005.jpg", "id": "f6", "section_type": "FIG", "type": "fig_caption"}, "text": "Using arguments in the draw_chains() and draw_phospho() functions, it is possible customize colors and labels.", "sentences": [], "annotations": [], "relations": []}, {"offset": 9988, "infons": {"section_type": "DISCUSS", "type": "title_1"}, "text": "Discussion", "sentences": [], "annotations": [], "relations": []}, {"offset": 9999, "infons": {"section_type": "DISCUSS", "type": "paragraph"}, "text": "After 20 years of manual drawing of protein schematics and experience in proteomic studies \u2013 , the need for a more sustainable and programmatic method seemed important and worthwhile. It seemed wise to develop an approach that would integrate protein visualizations with other bioinformatic tools available in Bioconductor. This package represents an approach to enabling the reproducible and programmatic generation of protein schematics.", "sentences": [], "annotations": [], "relations": []}, {"offset": 10441, "infons": {"section_type": "DISCUSS", "type": "paragraph"}, "text": "The plan is to develop this package further in terms of generating use cases and adding features. A list of issues for future development has already been added by the author on GitHub. Bug reports, feedback on desired features or code contributions can be made through GitHub.", "sentences": [], "annotations": [], "relations": []}, {"offset": 10719, "infons": {"section_type": "DISCUSS", "type": "paragraph"}, "text": "The challenge with protein visualization is that specialist domain knowledge sometimes trumps databases. Thus, while integrating knowledge from UniProt is an excellent starting point, it is also essential to allow customisation of plots. This can be done by adding or removing information about the proteins, protein features and post-translational modification to the dataframe object made with R.", "sentences": [], "annotations": [], "relations": []}, {"offset": 11118, "infons": {"section_type": "SUPPL", "type": "title_1"}, "text": "Data availability", "sentences": [], "annotations": [], "relations": []}, {"offset": 11136, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": "All data underlying the results are available as part of the article and no additional source data are required.", "sentences": [], "annotations": [], "relations": []}, {"offset": 11249, "infons": {"section_type": "SUPPL", "type": "title_1"}, "text": "Software availability", "sentences": [], "annotations": [], "relations": []}, {"offset": 11271, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " The drawProteins package is available at: http://bioconductor.org/packages/drawProteins/ ", "sentences": [], "annotations": [], "relations": []}, {"offset": 11362, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " Source code is available at: https://github.com/brennanpincardiff/drawProteins ", "sentences": [], "annotations": [], "relations": []}, {"offset": 11443, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " Archived source code as at time of publication: https://github.com/brennanpincardiff/drawProteins/tree/v1.0.2 and https://doi.org/10.5281/zenodo.1306619  ", "sentences": [], "annotations": [], "relations": []}, {"offset": 11599, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " License: MIT+", "sentences": [], "annotations": [], "relations": []}, {"offset": 11614, "infons": {"fpage": "271", "issue": "2", "lpage": "3", "name_0": "surname:Ren;given-names:J", "name_1": "surname:Wen;given-names:L", "name_2": "surname:Gao;given-names:X", "pub-id_doi": "10.1038/cr.2009.6", "pub-id_pmid": "19153597", "section_type": "REF", "source": "Cell Res.", "type": "ref", "volume": "19", "year": "2009"}, "text": "DOG 1.0: illustrator of protein domain structures.", "sentences": [], "annotations": [], "relations": []}, {"offset": 11665, "infons": {"fpage": "3359", "issue": "20", "lpage": "3361", "name_0": "surname:Liu;given-names:W", "name_1": "surname:Xie;given-names:Y", "name_2": "surname:Ma;given-names:J", "pub-id_doi": "10.1093/bioinformatics/btv362", "pub-id_pmid": "26069263", "section_type": "REF", "source": "Bioinformatics.", "type": "ref", "volume": "31", "year": "2015"}, "text": "IBS: an illustrator for the presentation and visualization of biological sequences.", "sentences": [], "annotations": [], "relations": []}, {"offset": 11749, "infons": {"fpage": "56", "name_0": "surname:Corpas;given-names:M", "pub-id_doi": "10.12688/f1000research.3-56.v1", "pub-id_pmid": "25580221", "section_type": "REF", "source": "F1000Res.", "type": "ref", "volume": "3", "year": "2014"}, "text": "The BioJS article collection of open source components for biological data visualisation [version 1; referees: not peer reviewed].", "sentences": [], "annotations": [], "relations": []}, {"offset": 11880, "infons": {"fpage": "3012", "issue": "19", "lpage": "3014", "name_0": "surname:Skidmore;given-names:ZL", "name_1": "surname:Wagner;given-names:AH", "name_2": "surname:Lesurf;given-names:R", "pub-id_doi": "10.1093/bioinformatics/btw325", "pub-id_pmid": "27288499", "section_type": "REF", "source": "Bioinformatics.", "type": "ref", "volume": "32", "year": "2016"}, "text": "GenVisR: Genomic Visualizations in R.", "sentences": [], "annotations": [], "relations": []}, {"offset": 11918, "infons": {"fpage": "D158", "issue": "D1", "lpage": "D169", "pub-id_doi": "10.1093/nar/gkw1099", "pub-id_pmid": "27899622", "section_type": "REF", "source": "Nucleic Acids Res.", "type": "ref", "volume": "45", "year": "2017"}, "text": "Uniprot: the universal protein knowledgebase.", "sentences": [], "annotations": [], "relations": []}, {"offset": 11964, "infons": {"fpage": "W539", "issue": "W1", "lpage": "W544", "name_0": "surname:Nightingale;given-names:A", "name_1": "surname:Antunes;given-names:R", "name_2": "surname:Alpi;given-names:E", "pub-id_doi": "10.1093/nar/gkx237", "pub-id_pmid": "28383659", "section_type": "REF", "source": "Nucleic Acids Res.", "type": "ref", "volume": "45", "year": "2017"}, "text": "The Proteins API: accessing key integrated protein and genome information.", "sentences": [], "annotations": [], "relations": []}, {"offset": 12039, "infons": {"name_0": "surname:Wickham;given-names:H", "section_type": "REF", "type": "ref", "year": "2009"}, "text": "ggplot2: Elegant Graphics for Data Analysis", "sentences": [], "annotations": [], "relations": []}, {"offset": 12083, "infons": {"fpage": "e1005510", "issue": "6", "name_0": "surname:Wilson;given-names:G", "name_1": "surname:Bryan;given-names:J", "name_2": "surname:Cranston;given-names:K", "pub-id_doi": "10.1371/journal.pcbi.1005510", "pub-id_pmid": "28640806", "section_type": "REF", "source": "PLoS Comput Biol.", "type": "ref", "volume": "13", "year": "2017"}, "text": "Good enough practices in scientific computing.", "sentences": [], "annotations": [], "relations": []}, {"offset": 12130, "infons": {"section_type": "REF", "type": "ref", "year": "2018"}, "text": "The uniprot proteins api", "sentences": [], "annotations": [], "relations": []}, {"offset": 12155, "infons": {"fpage": "a001651", "issue": "6", "name_0": "surname:Lawrence;given-names:T", "pub-id_doi": "10.1101/cshperspect.a001651", "pub-id_pmid": "20457564", "section_type": "REF", "source": "Cold Spring Harb Perspect Biol.", "type": "ref", "volume": "1", "year": "2009"}, "text": "The nuclear factor NF-kappaB pathway in inflammation.", "sentences": [], "annotations": [], "relations": []}, {"offset": 12209, "infons": {"fpage": "3439", "issue": "16", "lpage": "3440", "name_0": "surname:Durinck;given-names:S", "name_1": "surname:Moreau;given-names:Y", "name_2": "surname:Kasprzyk;given-names:A", "pub-id_doi": "10.1093/bioinformatics/bti525", "pub-id_pmid": "16082012", "section_type": "REF", "source": "Bioinformatics.", "type": "ref", "volume": "21", "year": "2005"}, "text": "BioMart and Bioconductor: a powerful link between biological databases and microarray data analysis.", "sentences": [], "annotations": [], "relations": []}, {"offset": 12310, "infons": {"fpage": "1184", "issue": "8", "lpage": "91", "name_0": "surname:Durinck;given-names:S", "name_1": "surname:Spellman;given-names:PT", "name_2": "surname:Birney;given-names:E", "pub-id_doi": "10.1038/nprot.2009.97", "pub-id_pmid": "19617889", "section_type": "REF", "source": "Nat Protoc.", "type": "ref", "volume": "4", "year": "2009"}, "text": "Mapping identifiers for the integration of genomic datasets with the R/Bioconductor package biomaRt.", "sentences": [], "annotations": [], "relations": []}, {"offset": 12411, "infons": {"name_0": "surname:Smith;given-names:M", "name_1": "surname:Durinck;given-names:S", "name_2": "surname:Huber;given-names:W", "section_type": "REF", "type": "ref"}, "text": "The biomart users guide", "sentences": [], "annotations": [], "relations": []}, {"offset": 12435, "infons": {"fpage": "4729", "issue": "7", "lpage": "4738", "name_0": "surname:Brennan;given-names:P", "name_1": "surname:Babbage;given-names:JW", "name_2": "surname:Thomas;given-names:G", "pub-id_doi": "10.1128/MCB.19.7.4729", "pub-id_pmid": "10373522", "section_type": "REF", "source": "Mol Cell Biol.", "type": "ref", "volume": "19", "year": "1999"}, "text": "p70 s6k integrates phosphatidylinositol 3-kinase and rapamycin-regulated signals for E2F regulation in T lymphocytes.", "sentences": [], "annotations": [], "relations": []}, {"offset": 12553, "infons": {"fpage": "1195", "issue": "2", "lpage": "1203", "name_0": "surname:Brennan;given-names:P", "name_1": "surname:Floettmann;given-names:JE", "name_2": "surname:Mehl;given-names:A", "pub-id_doi": "10.1074/jbc.M005461200", "pub-id_pmid": "11031256", "section_type": "REF", "source": "J Biol Chem.", "type": "ref", "volume": "276", "year": "2001"}, "text": "Mechanism of action of a novel latent membrane protein-1 dominant negative.", "sentences": [], "annotations": [], "relations": []}, {"offset": 12629, "infons": {"fpage": "138", "issue": "1\u20133", "lpage": "142", "name_0": "surname:Fielding;given-names:CA", "name_1": "surname:Siebert;given-names:S", "name_2": "surname:Rowe;given-names:M", "pub-id_doi": "10.1016/j.febslet.2004.06.035", "pub-id_pmid": "15251454", "section_type": "REF", "source": "FEBS Lett.", "type": "ref", "volume": "570", "year": "2004"}, "text": "Analysis of human tumour necrosis factor receptor 1 dominant-negative mutants reveals a major region controlling cell surface expression.", "sentences": [], "annotations": [], "relations": []}, {"offset": 12767, "infons": {"fpage": "5051", "issue": "11", "lpage": "5062", "name_0": "surname:Alsagaby;given-names:SA", "name_1": "surname:Khanna;given-names:S", "name_2": "surname:Hart;given-names:KW", "pub-id_doi": "10.1021/pr5002803", "pub-id_pmid": "24983324", "section_type": "REF", "source": "J Proteome Res.", "type": "ref", "volume": "13", "year": "2014"}, "text": "Proteomics-based strategies to identify proteins relevant to chronic lymphocytic leukemia.", "sentences": [], "annotations": [], "relations": []}, {"offset": 12858, "infons": {"name_0": "surname:Brennan;given-names:P", "pub-id_doi": "10.5281/zenodo.1306619", "section_type": "REF", "source": "Zenodo.", "type": "ref", "year": "2018"}, "text": "brennanpincardiff/drawProteins: F1000 publication release (Version v1.0.2).", "sentences": [], "annotations": [], "relations": []}, {"offset": 12934, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": "10.5256/f1000research.15828.r37075", "sentences": [], "annotations": [], "relations": []}, {"offset": 12969, "infons": {"section_type": "SUPPL", "type": "title"}, "text": "Referee response for version 1", "sentences": [], "annotations": [], "relations": []}, {"offset": 13000, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": "Griffith", "sentences": [], "annotations": [], "relations": []}, {"offset": 13009, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": "Malachi", "sentences": [], "annotations": [], "relations": []}, {"offset": 13017, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": "2018", "sentences": [], "annotations": [], "relations": []}, {"offset": 13022, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": "The author describes the creation of a Bioconductor/R package for generic visualization of 2D protein diagrams.\u00a0 The tool does not address 3D visualizations or visualization of protein sequences or alignments. Rather it allows the user to view the position of protein annotations within an arbitrary number of proteins. By default, UniProt sequence identifiers and associated annotations are supported. The demonstrated examples depict protein domains/motifs and phosphorylation sites.\u00a0 Identifying a set of proteins to view from the Gene Ontology via bioMart is also demonstrated. There are likely to be many additional useful queries that could be achieved by similar bioMart queries.", "sentences": [], "annotations": [], "relations": []}, {"offset": 13711, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " The package leans on ggplot2 functionality for the actual drawing of each protein schematic. The drawings consist of simple elements: colored rectangles and circles that can be nested, overlaid, and labeled. \u00a0A few simple use cases are illustrated.\u00a0 The writing is brief and straightforward. The code is available under an open access document.\u00a0", "sentences": [], "annotations": [], "relations": []}, {"offset": 14061, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " I was able to install the package and run through the examples in the paper in a few minutes with only minor difficulties.", "sentences": [], "annotations": [], "relations": []}, {"offset": 14185, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " In particular, I had trouble getting this line to work in the example:", "sentences": [], "annotations": [], "relations": []}, {"offset": 14257, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " ```", "sentences": [], "annotations": [], "relations": []}, {"offset": 14262, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " output <- getBM(attributes = c('uniprotswissprot', 'hgnc_symbol'), filters = 'go', values = 'GO:0004707', mart = ensembl)", "sentences": [], "annotations": [], "relations": []}, {"offset": 14385, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " ```", "sentences": [], "annotations": [], "relations": []}, {"offset": 14390, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " Perhaps some problem with the way the single quotes are being encoded in that section?", "sentences": [], "annotations": [], "relations": []}, {"offset": 14478, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " Overall the tool is quite basic but also appears to be customizable. I anticipate it could be useful to many who wish to automate visualization of protein drawings and integrate these with visualization of various types omics data.", "sentences": [], "annotations": [], "relations": []}, {"offset": 14711, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": "I have read this submission. I believe that I have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.", "sentences": [], "annotations": [], "relations": []}, {"offset": 14856, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": "10.5256/f1000research.15828.r37074", "sentences": [], "annotations": [], "relations": []}, {"offset": 14891, "infons": {"section_type": "SUPPL", "type": "title"}, "text": "Referee response for version 1", "sentences": [], "annotations": [], "relations": []}, {"offset": 14922, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": "Lexa", "sentences": [], "annotations": [], "relations": []}, {"offset": 14927, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": "Matej", "sentences": [], "annotations": [], "relations": []}, {"offset": 14933, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": "2018", "sentences": [], "annotations": [], "relations": []}, {"offset": 14938, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": "The paper describes a protein annotation visualization tool for R/Bioconductor that has already been in use for more than a year. The software is mature, I was able to install it easily, all the examples of code in the manuscript are functional. I only noticed a small deviation in the biomaRt example, most likely caused by slightly different data returned by biomaRt.", "sentences": [], "annotations": [], "relations": []}, {"offset": 15308, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " The manuscripts describes the purpose and functioning of the package in sufficient detail. However, I found the introduction a bit too brief, especially in terms of mentioning other similar software and advantages of drawProteins. For example, I found a Bioconductor package called Pviz that may be able to generate protein annotation visualizations.", "sentences": [], "annotations": [], "relations": []}, {"offset": 15660, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " As a minor remark, the last sentence in this paragraph on page 3 seems unclear to me:", "sentences": [], "annotations": [], "relations": []}, {"offset": 15747, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " \"The feature_to_dataframe() function will also add an \u201corder\u201d value to allow plotting. The order goes from the bottom in the manner of a graph.\"", "sentences": [], "annotations": [], "relations": []}, {"offset": 15897, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": " Finally, a suggestion. The software would be even more useful if it could handle reading and writing of standard protein annotation files in GFF or similar format. UniProt wikipedia page describes how it is applied to proteins in this example: https://www.uniprot.org/uniprot/P0A7B8.gff Although GFF is much more popular with genomic data, it seems to be ocassionally used for annotating protein sequences.", "sentences": [], "annotations": [], "relations": []}, {"offset": 16305, "infons": {"section_type": "SUPPL", "type": "paragraph"}, "text": "I have read this submission. I believe that I have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.", "sentences": [], "annotations": [], "relations": []}], "annotations": [], "relations": []}]}]